https://techtfq.com/blog/top-20-sql-interview-questions

------------------------------------------------------------

INNER JOIN will fetch only those records which are present in both the joined tables. 

The matching of the records is only based on the columns used for joining these two tables. INNER JOIN can also be represented as JOIN in your SELECT query.

SELECT cr.country_name, ct.continent_name

FROM continents ct

INNER JOIN countries cr 

ON ct.continent_code = cr.continent_code;


--------------------------------------------------------
LEFT JOIN will fetch all records from the left table even if those records are not present in right table

records which are not present in right table (but present in left table), SQL will return a NULL value

SELECT cr.country_name, ct.continent_name

FROM continents ct

LEFT JOIN countries cr 

ON ct.continent_code = cr.continent_code;

--------------------------------

SELF JOIN is when you join a table to itself. 

SELECT cr1.country_name

FROM countries cr1

JOIN countries cr2 

ON cr1.country_code = cr2.continent_code;

------------------------------
Natural join:
	when doing the natural join, both the tables need to have columns with same name and these columns should have same data type.
	not need to use the ON clause 
	
SELECT cr.country_name, ct.continent_name

FROM continents ct

NATURAL JOIN countries cr;

---------------------------------
Aggregate Functions:
	
1.SELECT dept_id, SUM(salary) as total_salary_per_dept 

FROM employee 

GROUP BY dept_id;

2.SELECT dept_id, AVG(salary) as avg_salary_per_dept 

FROM employee 

GROUP BY dept_id;

3.SELECT dept_id, MIN(salary) as min_salary_per_dept 

FROM employee 

GROUP BY dept_id;

4.SELECT dept_id, MAX(salary) as max_salary_per_dept 

FROM employee 

GROUP BY dept_id;

5.SELECT dept_id, COUNT(emp_id) as no_of_emp_per_dept 

FROM employee 

GROUP BY dept_id;



-------------------------------------------------------
SQL queries:

Fetch even rows using MOD() function:
SELECT * FROM Patients WHERE MOD(PatientID,2)=0;

Fetch odd rows using MOD() function:
SELECT * FROM Patients WHERE MOD(PatientID,2)=1;

retrieve the first four characters
SELECT SUBSTRING(EmpLname, 1, 4) FROM EmployeeInfo;

fetch the EmpFname from the EmployeeInfo table in upper case
SELECT UPPER(EmpFname) AS EmpName FROM EmployeeInfo;

Fetch string before "("
SELECT SUBSTRING(Address, 1, CHARINDEX('(',Address)) FROM EmployeeInfo;

find all the employees whose salary is between 50000 to 100000
SELECT * FROM EmployeePosition WHERE Salary BETWEEN '50000' AND '100000'

find the names of employees that begin with ‘S’
SELECT * FROM EmployeeInfo WHERE EmpFname LIKE 'S%';

Retrieve the EmpFname and EmpLname in a single column as “FullName”
SELECT CONCAT(EmpFname, ' ', EmpLname) AS 'FullName' FROM EmployeeInfo;

fetch all the records from the EmployeeInfo table ordered by EmpLname in descending order and Department in the ascending order.
SELECT * FROM EmployeeInfo ORDER BY EmpFname desc, Department asc;

https://www.edureka.co/blog/interview-questions/sql-query-interview-questions

fetch details of employees whose EmpLname ends with an alphabet ‘A’ and contains five alphabets
SELECT * FROM EmployeeInfo WHERE EmpLname LIKE '____a'

fetch details of all employees excluding the employees with first names, “Sanjay” and “Sonia” from the EmployeeInfo table.
SELECT * FROM EmployeeInfo WHERE EmpFname NOT IN ('Sanjay','Sonia');


Nth highest salary from the table without using TOP/limit keyword.

SELECT Salary 
FROM EmployeePosition E1 
WHERE N-1 = ( 
      SELECT COUNT( DISTINCT ( E2.Salary ) ) 
      FROM EmployeePosition E2 
      WHERE E2.Salary >  E1.Salary );
	  
Select TOP 1 customerid from Customers where customerid IN (
  SELECT Top 3 customerid from Customers order by customerid asc) order by customerid desc ;

-------------------------------------------------
https://sqliteonline.com/

CREATE TABLE Customers (
    CustomerID int,
    CustomerName varchar(255),
    ContactName varchar(255),
    Address varchar(255),
    City varchar(255),
	PostalCode varchar(255),
	Country varchar(255)
);

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (101, 'Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');


INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (102, 'Ross', 'Ross Geller', 'Meadows', 'Waukesha', '53186', 'USA');

INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (103, 'Rachel', 'Rachel Green', 'Milwaukee', 'Milwaukee', '4006', 'USA');

INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (104, 'Monica', 'Monica Geller', 'Springdale', 'Waukesha', '53186', 'USA');


INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (105, 'Chandler', 'Chandler Bing', 'Willow', 'Milwaukee', '4006', 'UK');

INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (106, 'Joey', 'Joey Tribbiani', 'Fox', 'Milwaukee', '53186', 'Italy');

INSERT INTO Customers (customerid, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (107, 'Phoebe', 'Phoebe Buffay', 'Waukesha', 'Waukesha', '4006', 'USA');


-------------------------------------------
Normalization is the process to eliminate data redundancy and enhance data integrity in the table.

Normalization also helps to organize the data in the database.

1NF	:	atomicity of the table is 1
		atomicity states that a single cell cannot hold multiple values.		

2NF	:	should not possess partial dependency

3NF	:	should be no transitive dependency for non-prime attributes,
		non-prime attributes (which are not a part of the candidate key) should not depend on other non-prime attributes in a table
		ensures the reduction of data duplication
























