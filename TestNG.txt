RetryMechanism:

public interface IRetryAnalyzer {
	public boolean retry(ITestResult result);
}


------------------------------
package Tests;

import org.testng.IRetryAnalyzer;
import org.testng.ITestResult;

public class RetryAnalyzer implements IRetryAnalyzer {
	
	int counter = 0;
	int retryLimit = 4;
	
	@Override
	public boolean retry(ITestResult result) {

		if(counter < retryLimit)
		{
			counter++;
			return true;
		}
		return false;
	}
}

There are two ways to implement this:
1.By specifying retryAnalyzer value in the @Test annotation
2.By adding Retry analyser during run time by implementing on the of the Listener interfaces


Approach 1:
public class Test001 {

	@Test(retryAnalyzer = Tests.RetryAnalyzer.class)
	public void Test1()
	{
		Assert.assertEquals(false, true);
	}

	@Test
	public void Test2()
	{
		Assert.assertEquals(false, true);
	}
}

Approach 2: Specifying retryAnalyzer during runtime

public class AnnotationTransformer implements IAnnotationTransformer {

	@Override
	public void transform(ITestAnnotation annotation, 
                                                Class testClass, 
                                                Constructor testConstructor,
                                                Method testMethod) {
		annotation.setRetryAnalyzer(RetryAnalyzer.class);
	}
}

add it as a listener in the testng run xml

<suite name="RetryFailedTests" verbose="1" >
 <listeners>
        <listener class-name="Tests.AnnotationTransformer"/>
  </listeners>
  <test name="RetryMulitple">
    <classes>
      <class name="Tests.Test001"/>
    </classes>
  </test>
</suite>

Approach 3: We can create custom annotation e.g. @RetryCountIfFailed(10) using CustomAnnotations package in java


------------------------------------------------------------
GROUPS:

<suite name="test_suite">  
   <groups>  
      <run>  
         <include name="UI Test"/>  
      </run>  
   </groups>  
  <test name="Check Login Page">  
     <classes>  
         <class name="com.demoqa.Check_Login_Page"/>  
         </classes>  
     </test>  
     <test name="Response Status">  
    <classes>  
       <class name="com.demoqa.Response_Status"/>  
    </classes>  
    </test>  
</suite>

how to create groups;
@Test(groups = { "UI Test" })	
    public void checkTitle() {	
       String testTitle = "Free QA Automation Tools For Everyone";
       String originalTitle = driver.getTitle();
      Assert.assertEquals(originalTitle, testTitle);
    }	


We can group the groups:
<suite name="Test-Suite" >
   <test name="ToolsQA" >
   	<groups>
   		<define name = "SuperGroup">
   			<include name = "demo"></include>
   		</define>
   		<run>
   			<include name = "SuperGroup"></include>
   		</run>
   	</groups>
       <classes> 
          <class name="TestNG" />
       </classes>
   </test>
 </suite>
 
Regular expressions:
<run>
   			<include name = "demo.*">
   			</include>
</run>

whatever group name start with demo will be included
--------------------------------
Test Dependency

public class Dependent {

  @Test (dependsOnMethods = { "OpenBrowser" })
  public void SignIn() {
	  System.out.println("This will execute second (SignIn)");
  }

  @Test
  public void OpenBrowser() {
	  System.out.println("This will execute first (Open Browser)");
  }
}
-----------------------------------

Listener:

public class ListenersTestNG implements ITestListener {
	public void onStart(ITestContext context) {	
		System.out.println("onStart method started");
	}
}

@Listeners(ListenersTestNG.class)
public class TestNG {
	WebDriver driver = new FirefoxDriver();
	@Test
	public void Test1(){}
	
	@Test
	public void Test2(){}
	
	@Test
	public void Test3(){}
}

Approach 2: add this at suite level

<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd" >
<suite name="ListenerExecution">
<listeners>
    <listener class-name = "ListenersTestNG"></listener>
    </listeners>

    <test name="ExecutingListeners">
        <classes>
            <class name="TestNG"></class>
        </classes>
    </test>
    
    
</suite>

----------------------------